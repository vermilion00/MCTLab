
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001e6  0000029a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002c9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f1  00000000  00000000  00000327  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fb  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c7  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001d4  000001d4  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.aufgabe1 00000054  000000b4  000000b4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001c  0000018a  0000018a  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_7 00000018  000001a6  000001a6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_1 00000040  0000014a  0000014a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_2 00000042  00000108  00000108  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.long_duty_cycle 00000001  00800064  00800064  0000029a  2**0
                  ALLOC
 20 .bss.timer_running 00000001  00800065  00800065  0000029a  2**0
                  ALLOC
 21 .data.duty_cycle 00000004  00800060  000001e2  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.__dummy_fini 00000002  000001dc  000001dc  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000001de  000001de  00000292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000001e0  000001e0  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000001be  000001be  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000001d8  000001d8  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_2>
   c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  10:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  14:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  18:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_7>
  20:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  24:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  28:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  2c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  30:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  34:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  38:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  3c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  40:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  44:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  48:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  4c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  50:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 64       	ori	r16, 0x40	; 64
  58:	00 01       	movw	r0, r0
  5a:	e2 00       	.word	0x00e2	; ????
  5c:	64 00       	.word	0x0064	; ????
  5e:	66 80       	ldd	r6, Z+6	; 0x06

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  ac:	0c 94 df 00 	jmp	0x1be	; 0x1be <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

000001d4 <__bad_interrupt>:
 1d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.aufgabe1:

000000b4 <aufgabe1>:
			//Deactivate Pin D5
			PORTD &= ~(1 << 5);
			//Set the active phase flag
			pwm_active = 1;
			//Set the timer running flag
			timer_running = 1;
  b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <long_duty_cycle>
  b8:	88 23       	and	r24, r24
  ba:	99 f0       	breq	.+38     	; 0xe2 <aufgabe1+0x2e>
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	86 e7       	ldi	r24, 0x76	; 118
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <aufgabe1+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <aufgabe1+0x18>
  cc:	00 00       	nop
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	92 e1       	ldi	r25, 0x12	; 18
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <aufgabe1+0x24>
  dc:	00 c0       	rjmp	.+0      	; 0xde <aufgabe1+0x2a>
  de:	00 00       	nop
  e0:	e9 cf       	rjmp	.-46     	; 0xb4 <aufgabe1>
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	89 ef       	ldi	r24, 0xF9	; 249
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <aufgabe1+0x38>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <aufgabe1+0x3e>
  f2:	00 00       	nop
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	8f 7d       	andi	r24, 0xDF	; 223
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	8d e8       	ldi	r24, 0x8D	; 141
  fc:	92 e1       	ldi	r25, 0x12	; 18
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <aufgabe1+0x4a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <aufgabe1+0x50>
 104:	00 00       	nop
 106:	d6 cf       	rjmp	.-84     	; 0xb4 <aufgabe1>

Disassembly of section .text.main:

0000018a <main>:
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	78 94       	sei
 190:	8b b7       	in	r24, 0x3b	; 59
 192:	80 6c       	ori	r24, 0xC0	; 192
 194:	8b bf       	out	0x3b, r24	; 59
 196:	85 b7       	in	r24, 0x35	; 53
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	85 bf       	out	0x35, r24	; 53
 19c:	85 b7       	in	r24, 0x35	; 53
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	85 bf       	out	0x35, r24	; 53
 1a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <__data_load_end>

Disassembly of section .text.__vector_7:

000001a6 <__vector_7>:
	}
}

//Timer FastPWM mode
/*TODO: Check if COMPA is correct */
ISR(TIMER1_COMPA_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
	//Reset the timer running flag
	timer_running = 0;
 1b0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_running>
}
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

Disassembly of section .text.__vector_1:

0000014a <__vector_1>:
			//Deactivate Pin D5
			PORTD &= ~(1 << 5);
			//Set the active phase flag
			pwm_active = 1;
			//Set the timer running flag
			timer_running = 1;
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	a0 e8       	ldi	r26, 0x80	; 128
 162:	bf e3       	ldi	r27, 0x3F	; 63
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 168:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 170:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 174:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <long_duty_cycle>
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

Disassembly of section .text.__vector_2:

00000108 <__vector_2>:
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	a0 ec       	ldi	r26, 0xC0	; 192
 120:	bf e3       	ldi	r27, 0x3F	; 63
 122:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 12e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <long_duty_cycle>
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000001dc <_fini>:
 1dc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001de <__funcs_on_exit>:
 1de:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001e0 <__simulator_exit>:
 1e0:	08 95       	ret

Disassembly of section .text.exit:

000001be <exit>:
 1be:	ec 01       	movw	r28, r24
 1c0:	0e 94 ef 00 	call	0x1de	; 0x1de <__funcs_on_exit>
 1c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_fini>
 1c8:	ce 01       	movw	r24, r28
 1ca:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__simulator_exit>
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Exit>

Disassembly of section .text._Exit:

000001d8 <_Exit>:
 1d8:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
